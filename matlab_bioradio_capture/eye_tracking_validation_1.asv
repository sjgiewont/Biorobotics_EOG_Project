%-------------------------------------
% Run testBioradio.m first
%-------------------------------------


% Clear the workspace and the screen
sca;        % clear all screens/screen objects
% close all;
% clearvars;

load('regression_fit_1.mat');

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers
screens = Screen('Screens');

% Draw to the external screen if avaliable
screenNumber = max(screens);

% Define black and white
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% Open an on screen window
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, black);

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Query the frame duration
ifi = Screen('GetFlipInterval', window);

% Get the centre coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

% color of circle green
colCircle = [0 1 0]; 

% Sync us and get a time stamp
vbl = Screen('Flip', window);
waitframes = 1;

% Maximum priority level
topPriorityLevel = MaxPriority(window);
Priority(topPriorityLevel);

circXpos = xCenter; 
circYpos = yCenter;

% draw circle at origin
my_circle(window, colCircle, circXpos, yCenter, 20);
vbl  = Screen('Flip', window, vbl + (waitframes - 0.5) * ifi);
isCollecting = 1;

WaitSecs(2);

calibration_check = 0;
running_horizontal_mean = [];
running_vertical_mean = [];

try

    while calibration_check < 5   
        rawWindwTranspose = transpose(rawWindow);
        sampled_vertical = rawWindwTranspose(:,2);
        sampled_horizontal = rawWindwTranspose(:,1);

        sampled_vertical_mean = mean(sampled_vertical);
        sampled_horizontal_mean = mean(sampled_horizontal);

        running_vertical_mean = [running_vertical_mean, sampled_vertical_mean];
        running_horizontal_mean = [running_horizontal_mean, sampled_horizontal_mean];

        pause(1)

        calibration_check = calibration_check + 1;
    end

    vertical_base_meas = mean(running_vertical_mean);
    horizontal_base_meas = mean(running_horizontal_mean);

    % evaluate the first base measurement
%     val = py.search5.search(vertical_base_meas, horizontal_base_meas)
%     cP = cell(val);
%     predicted_vertical_first = cP{1};
%     predicted_horizontal_first = cP{2};

    % color of circle red
    colCircle = [0 0 1]; 
    colValidationCricle = [1 0 0]; 
    frame_step_size = 2;
    first_flag = 0;
    total_validation_data = [];


    % Move circle to the right until hits end of screen
    while (circXpos < screenXpixels) & ~KbCheck
        circXpos = circXpos + frame_step_size;
        my_circle(window, colValidationCricle, circXpos, circYpos, 20);

        rawWindwTranspose = transpose(rawWindow);
        sampled_vertical = rawWindwTranspose(:,2);
        sampled_horizontal = rawWindwTranspose(:,1);

        sampled_vertical_mean = vertical_base_meas - mean(sampled_vertical)
        sampled_horizontal_mean = horizontal_base_meas - mean(sampled_horizontal)

        val = py.search5.search(sampled_vertical_mean, sampled_horizontal_mean)
        cP = cell(val);

        predicted_vertical = cP{1};
        predicted_horizontal = cP{2};
        
        if first_flag == 0
            predicted_horizontal_first = predicted_horizontal;
            first_flag = 1;
        end

        new_ball_vertical = predicted_vertical + (yCenter - predicted_vertical_first);
        new_ball_horizontal = predicted_horizontal + (xCenter - predicted_horizontal_first);
        
%         new_ball_vertical = predicted_vertical;
%         new_ball_horizontal = predicted_horizontal;

        if new_ball_vertical > screenYpixels
            new_ball_vertical = screenYpixels;
        elseif new_ball_vertical < 0
            new_ball_vertical = 0;
        end

        if new_ball_horizontal > screenXpixels
            new_ball_horizontal = screenXpixels;
        elseif new_ball_horizontal < 0
            new_ball_horizontal = 0;
        end        

        my_circle(window, colCircle, new_ball_horizontal, new_ball_vertical, 20);
        % Flip to the screen
        vbl  = Screen('Flip', window, vbl + (waitframes - 0.5) * ifi);

        curr_validation_data = [circXpos, circYpos, new_ball_horizontal, new_ball_vertical];
        total_validation_data = [total_validation_data; curr_validation_data]; 
    end


    % Move circle to the right until hits end of screen
    while (circXpos > 0) & ~KbCheck
        circXpos = circXpos - frame_step_size;
        my_circle(window, colValidationCricle, circXpos, circYpos, 20);

        rawWindwTranspose = transpose(rawWindow);
        sampled_vertical = rawWindwTranspose(:,2);
        sampled_horizontal = rawWindwTranspose(:,1);

        sampled_vertical_mean = vertical_base_meas - mean(sampled_vertical)
        sampled_horizontal_mean = horizontal_base_meas - mean(sampled_horizontal)

        val = py.search5.search(sampled_vertical_mean, sampled_horizontal_mean)
        cP = cell(val);

        predicted_vertical = cP{1};
        predicted_horizontal = cP{2};

        new_ball_vertical = predicted_vertical + (yCenter - predicted_vertical_first);
        new_ball_horizontal = predicted_horizontal + (xCenter - predicted_horizontal_first);

%         new_ball_vertical = predicted_vertical;
%         new_ball_horizontal = predicted_horizontal;

        if new_ball_vertical > screenYpixels
            new_ball_vertical = screenYpixels;
        elseif new_ball_vertical < 0
            new_ball_vertical = 0;
        end

        if new_ball_horizontal > screenXpixels
            new_ball_horizontal = screenXpixels;
        elseif new_ball_horizontal < 0
            new_ball_horizontal = 0;
        end        

        my_circle(window, colCircle, new_ball_horizontal, new_ball_vertical, 20);
        % Flip to the screen
        vbl  = Screen('Flip', window, vbl + (waitframes - 0.5) * ifi);

        curr_validation_data = [circXpos, circYpos, new_ball_horizontal, new_ball_vertical];
        total_validation_data = [total_validation_data; curr_validation_data]; 
    end


    % Move circle to the right until hits end of screen
    while (circXpos < xCenter) & ~KbCheck
        circXpos = circXpos + frame_step_size;
        my_circle(window, colValidationCricle, circXpos, circYpos, 20);

        rawWindwTranspose = transpose(rawWindow);
        sampled_vertical = rawWindwTranspose(:,2);
        sampled_horizontal = rawWindwTranspose(:,1);

        sampled_vertical_mean = vertical_base_meas - mean(sampled_vertical)
        sampled_horizontal_mean = horizontal_base_meas - mean(sampled_horizontal)

        val = py.search5.search(sampled_vertical_mean, sampled_horizontal_mean)
        cP = cell(val);

        predicted_vertical = cP{1};
        predicted_horizontal = cP{2};

        new_ball_vertical = predicted_vertical + (yCenter - predicted_vertical_first);
        new_ball_horizontal = predicted_horizontal + (xCenter - predicted_horizontal_first);

%         new_ball_vertical = predicted_vertical;
%         new_ball_horizontal = predicted_horizontal;

        if new_ball_vertical > screenYpixels
            new_ball_vertical = screenYpixels;
        elseif new_ball_vertical < 0
            new_ball_vertical = 0;
        end

        if new_ball_horizontal > screenXpixels
            new_ball_horizontal = screenXpixels;
        elseif new_ball_horizontal < 0
            new_ball_horizontal = 0;
        end        

        my_circle(window, colCircle, new_ball_horizontal, new_ball_vertical, 20);
        % Flip to the screen
        vbl  = Screen('Flip', window, vbl + (waitframes - 0.5) * ifi);

        curr_validation_data = [circXpos, circYpos, new_ball_horizontal, new_ball_vertical];
        total_validation_data = [total_validation_data; curr_validation_data]; 
    end


    % Move circle to the right until hits end of screen
    while (circYpos > 0) & ~KbCheck
        circYpos = circYpos - frame_step_size;
        my_circle(window, colValidationCricle, circXpos, circYpos, 20);

        rawWindwTranspose = transpose(rawWindow);
        sampled_vertical = rawWindwTranspose(:,2);
        sampled_horizontal = rawWindwTranspose(:,1);

        sampled_vertical_mean = vertical_base_meas - mean(sampled_vertical)
        sampled_horizontal_mean = horizontal_base_meas - mean(sampled_horizontal)

        val = py.search5.search(sampled_vertical_mean, sampled_horizontal_mean)
        cP = cell(val);

        predicted_vertical = cP{1};
        predicted_horizontal = cP{2};

        new_ball_vertical = predicted_vertical + (yCenter - predicted_vertical_first);
        new_ball_horizontal = predicted_horizontal + (xCenter - predicted_horizontal_first);

%         new_ball_vertical = predicted_vertical;
%         new_ball_horizontal = predicted_horizontal;

        if new_ball_vertical > screenYpixels
            new_ball_vertical = screenYpixels;
        elseif new_ball_vertical < 0
            new_ball_vertical = 0;
        end

        if new_ball_horizontal > screenXpixels
            new_ball_horizontal = screenXpixels;
        elseif new_ball_horizontal < 0
            new_ball_horizontal = 0;
        end        

        my_circle(window, colCircle, new_ball_horizontal, new_ball_vertical, 20);
        % Flip to the screen
        vbl  = Screen('Flip', window, vbl + (waitframes - 0.5) * ifi);

        curr_validation_data = [circXpos, circYpos, new_ball_horizontal, new_ball_vertical];
        total_validation_data = [total_validation_data; curr_validation_data]; 
    end


    % Move circle to the right until hits end of screen
    while (circYpos < screenYpixels) & ~KbCheck
        circYpos = circYpos + frame_step_size;
        my_circle(window, colValidationCricle, circXpos, circYpos, 20);

        rawWindwTranspose = transpose(rawWindow);
        sampled_vertical = rawWindwTranspose(:,2);
        sampled_horizontal = rawWindwTranspose(:,1);

        sampled_vertical_mean = vertical_base_meas - mean(sampled_vertical)
        sampled_horizontal_mean = horizontal_base_meas - mean(sampled_horizontal)

        val = py.search5.search(sampled_vertical_mean, sampled_horizontal_mean)
        cP = cell(val);

        predicted_vertical = cP{1};
        predicted_horizontal = cP{2};

        new_ball_vertical = predicted_vertical + (yCenter - predicted_vertical_first);
        new_ball_horizontal = predicted_horizontal + (xCenter - predicted_horizontal_first);

%         new_ball_vertical = predicted_vertical;
%         new_ball_horizontal = predicted_horizontal;

        if new_ball_vertical > screenYpixels
            new_ball_vertical = screenYpixels;
        elseif new_ball_vertical < 0
            new_ball_vertical = 0;
        end

        if new_ball_horizontal > screenXpixels
            new_ball_horizontal = screenXpixels;
        elseif new_ball_horizontal < 0
            new_ball_horizontal = 0;
        end        

        my_circle(window, colCircle, new_ball_horizontal, new_ball_vertical, 20);
        % Flip to the screen
        vbl  = Screen('Flip', window, vbl + (waitframes - 0.5) * ifi);

        curr_validation_data = [circXpos, circYpos, new_ball_horizontal, new_ball_vertical];
        total_validation_data = [total_validation_data; curr_validation_data]; 
    end


    % Move circle to the right until hits end of screen
    while (circYpos > yCenter) & ~KbCheck
        circYpos = circYpos - frame_step_size;
        my_circle(window, colValidationCricle, circXpos, circYpos, 20);

        rawWindwTranspose = transpose(rawWindow);
        sampled_vertical = rawWindwTranspose(:,2);
        sampled_horizontal = rawWindwTranspose(:,1);

        sampled_vertical_mean = vertical_base_meas - mean(sampled_vertical)
        sampled_horizontal_mean = horizontal_base_meas - mean(sampled_horizontal)

        val = py.search5.search(sampled_vertical_mean, sampled_horizontal_mean)
        cP = cell(val);

        predicted_vertical = cP{1};
        predicted_horizontal = cP{2};

        new_ball_vertical = predicted_vertical + (yCenter - predicted_vertical_first);
        new_ball_horizontal = predicted_horizontal + (xCenter - predicted_horizontal_first);

%         new_ball_vertical = predicted_vertical;
%         new_ball_horizontal = predicted_horizontal;

        if new_ball_vertical > screenYpixels
            new_ball_vertical = screenYpixels;
        elseif new_ball_vertical < 0
            new_ball_vertical = 0;
        end

        if new_ball_horizontal > screenXpixels
            new_ball_horizontal = screenXpixels;
        elseif new_ball_horizontal < 0
            new_ball_horizontal = 0;
        end        

        my_circle(window, colCircle, new_ball_horizontal, new_ball_vertical, 20);
        % Flip to the screen
        vbl  = Screen('Flip', window, vbl + (waitframes - 0.5) * ifi);

        curr_validation_data = [circXpos, circYpos, new_ball_horizontal, new_ball_vertical];
        total_validation_data = [total_validation_data; curr_validation_data]; 
    end

    save('validation_data.mat', 'total_validation_data');
    
    WaitSecs(1);
    isCollecting = 0;

    % Clear the screen
    sca;
    
catch
    WaitSecs(1);
    isCollecting = 0;

    % Clear the screen
    sca;
end

